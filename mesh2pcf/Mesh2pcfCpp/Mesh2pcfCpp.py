# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Mesh2pcfCpp
else:
    import _Mesh2pcfCpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Mesh2pcfCpp.delete_SwigPyIterator

    def value(self):
        return _Mesh2pcfCpp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Mesh2pcfCpp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Mesh2pcfCpp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Mesh2pcfCpp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Mesh2pcfCpp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Mesh2pcfCpp.SwigPyIterator_copy(self)

    def next(self):
        return _Mesh2pcfCpp.SwigPyIterator_next(self)

    def __next__(self):
        return _Mesh2pcfCpp.SwigPyIterator___next__(self)

    def previous(self):
        return _Mesh2pcfCpp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Mesh2pcfCpp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Mesh2pcfCpp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Mesh2pcfCpp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Mesh2pcfCpp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Mesh2pcfCpp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Mesh2pcfCpp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Mesh2pcfCpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Mesh2pcfCpp:
_Mesh2pcfCpp.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _Mesh2pcfCpp.SHARED_PTR_DISOWN
class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _Mesh2pcfCpp.ios_base_erase_event
    imbue_event = _Mesh2pcfCpp.ios_base_imbue_event
    copyfmt_event = _Mesh2pcfCpp.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _Mesh2pcfCpp.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _Mesh2pcfCpp.ios_base_flags(self, *args)

    def setf(self, *args):
        return _Mesh2pcfCpp.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _Mesh2pcfCpp.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _Mesh2pcfCpp.ios_base_precision(self, *args)

    def width(self, *args):
        return _Mesh2pcfCpp.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _Mesh2pcfCpp.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _Mesh2pcfCpp.ios_base_imbue(self, __loc)

    def getloc(self):
        return _Mesh2pcfCpp.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _Mesh2pcfCpp.ios_base_xalloc()

    def iword(self, __ix):
        return _Mesh2pcfCpp.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _Mesh2pcfCpp.ios_base_pword(self, __ix)
    __swig_destroy__ = _Mesh2pcfCpp.delete_ios_base

# Register ios_base in _Mesh2pcfCpp:
_Mesh2pcfCpp.ios_base_swigregister(ios_base)
cvar = _Mesh2pcfCpp.cvar
ios_base.boolalpha = _Mesh2pcfCpp.cvar.ios_base_boolalpha
ios_base.dec = _Mesh2pcfCpp.cvar.ios_base_dec
ios_base.fixed = _Mesh2pcfCpp.cvar.ios_base_fixed
ios_base.hex = _Mesh2pcfCpp.cvar.ios_base_hex
ios_base.internal = _Mesh2pcfCpp.cvar.ios_base_internal
ios_base.left = _Mesh2pcfCpp.cvar.ios_base_left
ios_base.oct = _Mesh2pcfCpp.cvar.ios_base_oct
ios_base.right = _Mesh2pcfCpp.cvar.ios_base_right
ios_base.scientific = _Mesh2pcfCpp.cvar.ios_base_scientific
ios_base.showbase = _Mesh2pcfCpp.cvar.ios_base_showbase
ios_base.showpoint = _Mesh2pcfCpp.cvar.ios_base_showpoint
ios_base.showpos = _Mesh2pcfCpp.cvar.ios_base_showpos
ios_base.skipws = _Mesh2pcfCpp.cvar.ios_base_skipws
ios_base.unitbuf = _Mesh2pcfCpp.cvar.ios_base_unitbuf
ios_base.uppercase = _Mesh2pcfCpp.cvar.ios_base_uppercase
ios_base.adjustfield = _Mesh2pcfCpp.cvar.ios_base_adjustfield
ios_base.basefield = _Mesh2pcfCpp.cvar.ios_base_basefield
ios_base.floatfield = _Mesh2pcfCpp.cvar.ios_base_floatfield
ios_base.badbit = _Mesh2pcfCpp.cvar.ios_base_badbit
ios_base.eofbit = _Mesh2pcfCpp.cvar.ios_base_eofbit
ios_base.failbit = _Mesh2pcfCpp.cvar.ios_base_failbit
ios_base.goodbit = _Mesh2pcfCpp.cvar.ios_base_goodbit
ios_base.app = _Mesh2pcfCpp.cvar.ios_base_app
ios_base.ate = _Mesh2pcfCpp.cvar.ios_base_ate
ios_base.binary = _Mesh2pcfCpp.cvar.ios_base_binary
ios_base.ios_base_in = _Mesh2pcfCpp.cvar.ios_base_ios_base_in
ios_base.out = _Mesh2pcfCpp.cvar.ios_base_out
ios_base.trunc = _Mesh2pcfCpp.cvar.ios_base_trunc
ios_base.beg = _Mesh2pcfCpp.cvar.ios_base_beg
ios_base.cur = _Mesh2pcfCpp.cvar.ios_base_cur
ios_base.end = _Mesh2pcfCpp.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _Mesh2pcfCpp.ios_rdstate(self)

    def clear(self, *args):
        return _Mesh2pcfCpp.ios_clear(self, *args)

    def setstate(self, __state):
        return _Mesh2pcfCpp.ios_setstate(self, __state)

    def good(self):
        return _Mesh2pcfCpp.ios_good(self)

    def eof(self):
        return _Mesh2pcfCpp.ios_eof(self)

    def fail(self):
        return _Mesh2pcfCpp.ios_fail(self)

    def bad(self):
        return _Mesh2pcfCpp.ios_bad(self)

    def exceptions(self, *args):
        return _Mesh2pcfCpp.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _Mesh2pcfCpp.ios_swiginit(self, _Mesh2pcfCpp.new_ios(__sb))
    __swig_destroy__ = _Mesh2pcfCpp.delete_ios

    def tie(self, *args):
        return _Mesh2pcfCpp.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _Mesh2pcfCpp.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _Mesh2pcfCpp.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _Mesh2pcfCpp.ios_fill(self, *args)

    def imbue(self, __loc):
        return _Mesh2pcfCpp.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _Mesh2pcfCpp.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _Mesh2pcfCpp.ios_widen(self, __c)

# Register ios in _Mesh2pcfCpp:
_Mesh2pcfCpp.ios_swigregister(ios)
class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _Mesh2pcfCpp.ostream_swiginit(self, _Mesh2pcfCpp.new_ostream(__sb))
    __swig_destroy__ = _Mesh2pcfCpp.delete_ostream

    def __lshift__(self, *args):
        return _Mesh2pcfCpp.ostream___lshift__(self, *args)

    def put(self, __c):
        return _Mesh2pcfCpp.ostream_put(self, __c)

    def write(self, __s, __n):
        return _Mesh2pcfCpp.ostream_write(self, __s, __n)

    def flush(self):
        return _Mesh2pcfCpp.ostream_flush(self)

    def tellp(self):
        return _Mesh2pcfCpp.ostream_tellp(self)

    def seekp(self, *args):
        return _Mesh2pcfCpp.ostream_seekp(self, *args)

# Register ostream in _Mesh2pcfCpp:
_Mesh2pcfCpp.ostream_swigregister(ostream)
class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _Mesh2pcfCpp.istream_swiginit(self, _Mesh2pcfCpp.new_istream(__sb))
    __swig_destroy__ = _Mesh2pcfCpp.delete_istream

    def __rshift__(self, *args):
        return _Mesh2pcfCpp.istream___rshift__(self, *args)

    def gcount(self):
        return _Mesh2pcfCpp.istream_gcount(self)

    def get(self, *args):
        return _Mesh2pcfCpp.istream_get(self, *args)

    def getline(self, *args):
        return _Mesh2pcfCpp.istream_getline(self, *args)

    def ignore(self, *args):
        return _Mesh2pcfCpp.istream_ignore(self, *args)

    def peek(self):
        return _Mesh2pcfCpp.istream_peek(self)

    def read(self, __s, __n):
        return _Mesh2pcfCpp.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _Mesh2pcfCpp.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _Mesh2pcfCpp.istream_putback(self, __c)

    def unget(self):
        return _Mesh2pcfCpp.istream_unget(self)

    def sync(self):
        return _Mesh2pcfCpp.istream_sync(self)

    def tellg(self):
        return _Mesh2pcfCpp.istream_tellg(self)

    def seekg(self, *args):
        return _Mesh2pcfCpp.istream_seekg(self, *args)

# Register istream in _Mesh2pcfCpp:
_Mesh2pcfCpp.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _Mesh2pcfCpp.iostream_swiginit(self, _Mesh2pcfCpp.new_iostream(__sb))
    __swig_destroy__ = _Mesh2pcfCpp.delete_iostream

# Register iostream in _Mesh2pcfCpp:
_Mesh2pcfCpp.iostream_swigregister(iostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

endl_cb_ptr = _Mesh2pcfCpp.endl_cb_ptr
endl = _Mesh2pcfCpp.endl
ends_cb_ptr = _Mesh2pcfCpp.ends_cb_ptr
ends = _Mesh2pcfCpp.ends
flush_cb_ptr = _Mesh2pcfCpp.flush_cb_ptr
flush = _Mesh2pcfCpp.flush
class Mesh2PCF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, density_field, box_size):
        _Mesh2pcfCpp.Mesh2PCF_swiginit(self, _Mesh2pcfCpp.new_Mesh2PCF(density_field, box_size))

    def compute_mesh2PCF(self, max_distance, bin_size):
        return _Mesh2pcfCpp.Mesh2PCF_compute_mesh2PCF(self, max_distance, bin_size)

    def get_xi(self):
        return _Mesh2pcfCpp.Mesh2PCF_get_xi(self)

    def get_r_array(self):
        return _Mesh2pcfCpp.Mesh2PCF_get_r_array(self)

    def get_counts(self):
        return _Mesh2pcfCpp.Mesh2PCF_get_counts(self)

    def get_prods(self):
        return _Mesh2pcfCpp.Mesh2PCF_get_prods(self)

    def set_progress(self, progress):
        return _Mesh2pcfCpp.Mesh2PCF_set_progress(self, progress)
    __swig_destroy__ = _Mesh2pcfCpp.delete_Mesh2PCF

# Register Mesh2PCF in _Mesh2pcfCpp:
_Mesh2pcfCpp.Mesh2PCF_swigregister(Mesh2PCF)
class Mesh2PCFAniso(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, density_grid, box_size):
        _Mesh2pcfCpp.Mesh2PCFAniso_swiginit(self, _Mesh2pcfCpp.new_Mesh2PCFAniso(density_grid, box_size))

    def compute_mesh2PCF(self, max_distance, bin_size, num_mu_bins):
        return _Mesh2pcfCpp.Mesh2PCFAniso_compute_mesh2PCF(self, max_distance, bin_size, num_mu_bins)

    def get_r_array(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_r_array(self)

    def get_mu_array(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_mu_array(self)

    def get_counts(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_counts(self)

    def get_prods(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_prods(self)

    def get_monopole(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_monopole(self)

    def get_quadrupole(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_quadrupole(self)

    def get_hexadecapole(self):
        return _Mesh2pcfCpp.Mesh2PCFAniso_get_hexadecapole(self)

    def set_progress(self, progress):
        return _Mesh2pcfCpp.Mesh2PCFAniso_set_progress(self, progress)
    __swig_destroy__ = _Mesh2pcfCpp.delete_Mesh2PCFAniso

# Register Mesh2PCFAniso in _Mesh2pcfCpp:
_Mesh2pcfCpp.Mesh2PCFAniso_swigregister(Mesh2PCFAniso)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mesh2pcfCpp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mesh2pcfCpp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _Mesh2pcfCpp.DoubleVector___bool__(self)

    def __len__(self):
        return _Mesh2pcfCpp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _Mesh2pcfCpp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mesh2pcfCpp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mesh2pcfCpp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mesh2pcfCpp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mesh2pcfCpp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mesh2pcfCpp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _Mesh2pcfCpp.DoubleVector_pop(self)

    def append(self, x):
        return _Mesh2pcfCpp.DoubleVector_append(self, x)

    def empty(self):
        return _Mesh2pcfCpp.DoubleVector_empty(self)

    def size(self):
        return _Mesh2pcfCpp.DoubleVector_size(self)

    def swap(self, v):
        return _Mesh2pcfCpp.DoubleVector_swap(self, v)

    def begin(self):
        return _Mesh2pcfCpp.DoubleVector_begin(self)

    def end(self):
        return _Mesh2pcfCpp.DoubleVector_end(self)

    def rbegin(self):
        return _Mesh2pcfCpp.DoubleVector_rbegin(self)

    def rend(self):
        return _Mesh2pcfCpp.DoubleVector_rend(self)

    def clear(self):
        return _Mesh2pcfCpp.DoubleVector_clear(self)

    def get_allocator(self):
        return _Mesh2pcfCpp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _Mesh2pcfCpp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _Mesh2pcfCpp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _Mesh2pcfCpp.DoubleVector_swiginit(self, _Mesh2pcfCpp.new_DoubleVector(*args))

    def push_back(self, x):
        return _Mesh2pcfCpp.DoubleVector_push_back(self, x)

    def front(self):
        return _Mesh2pcfCpp.DoubleVector_front(self)

    def back(self):
        return _Mesh2pcfCpp.DoubleVector_back(self)

    def assign(self, n, x):
        return _Mesh2pcfCpp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _Mesh2pcfCpp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _Mesh2pcfCpp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _Mesh2pcfCpp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _Mesh2pcfCpp.DoubleVector_capacity(self)
    __swig_destroy__ = _Mesh2pcfCpp.delete_DoubleVector

# Register DoubleVector in _Mesh2pcfCpp:
_Mesh2pcfCpp.DoubleVector_swigregister(DoubleVector)
class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mesh2pcfCpp.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mesh2pcfCpp.DoubleVectorVector___nonzero__(self)

    def __bool__(self):
        return _Mesh2pcfCpp.DoubleVectorVector___bool__(self)

    def __len__(self):
        return _Mesh2pcfCpp.DoubleVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _Mesh2pcfCpp.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mesh2pcfCpp.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector___setitem__(self, *args)

    def pop(self):
        return _Mesh2pcfCpp.DoubleVectorVector_pop(self)

    def append(self, x):
        return _Mesh2pcfCpp.DoubleVectorVector_append(self, x)

    def empty(self):
        return _Mesh2pcfCpp.DoubleVectorVector_empty(self)

    def size(self):
        return _Mesh2pcfCpp.DoubleVectorVector_size(self)

    def swap(self, v):
        return _Mesh2pcfCpp.DoubleVectorVector_swap(self, v)

    def begin(self):
        return _Mesh2pcfCpp.DoubleVectorVector_begin(self)

    def end(self):
        return _Mesh2pcfCpp.DoubleVectorVector_end(self)

    def rbegin(self):
        return _Mesh2pcfCpp.DoubleVectorVector_rbegin(self)

    def rend(self):
        return _Mesh2pcfCpp.DoubleVectorVector_rend(self)

    def clear(self):
        return _Mesh2pcfCpp.DoubleVectorVector_clear(self)

    def get_allocator(self):
        return _Mesh2pcfCpp.DoubleVectorVector_get_allocator(self)

    def pop_back(self):
        return _Mesh2pcfCpp.DoubleVectorVector_pop_back(self)

    def erase(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _Mesh2pcfCpp.DoubleVectorVector_swiginit(self, _Mesh2pcfCpp.new_DoubleVectorVector(*args))

    def push_back(self, x):
        return _Mesh2pcfCpp.DoubleVectorVector_push_back(self, x)

    def front(self):
        return _Mesh2pcfCpp.DoubleVectorVector_front(self)

    def back(self):
        return _Mesh2pcfCpp.DoubleVectorVector_back(self)

    def assign(self, n, x):
        return _Mesh2pcfCpp.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector_resize(self, *args)

    def insert(self, *args):
        return _Mesh2pcfCpp.DoubleVectorVector_insert(self, *args)

    def reserve(self, n):
        return _Mesh2pcfCpp.DoubleVectorVector_reserve(self, n)

    def capacity(self):
        return _Mesh2pcfCpp.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _Mesh2pcfCpp.delete_DoubleVectorVector

# Register DoubleVectorVector in _Mesh2pcfCpp:
_Mesh2pcfCpp.DoubleVectorVector_swigregister(DoubleVectorVector)
class DoubleGrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Mesh2pcfCpp.DoubleGrid_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Mesh2pcfCpp.DoubleGrid___nonzero__(self)

    def __bool__(self):
        return _Mesh2pcfCpp.DoubleGrid___bool__(self)

    def __len__(self):
        return _Mesh2pcfCpp.DoubleGrid___len__(self)

    def __getslice__(self, i, j):
        return _Mesh2pcfCpp.DoubleGrid___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Mesh2pcfCpp.DoubleGrid___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Mesh2pcfCpp.DoubleGrid___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Mesh2pcfCpp.DoubleGrid___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Mesh2pcfCpp.DoubleGrid___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Mesh2pcfCpp.DoubleGrid___setitem__(self, *args)

    def pop(self):
        return _Mesh2pcfCpp.DoubleGrid_pop(self)

    def append(self, x):
        return _Mesh2pcfCpp.DoubleGrid_append(self, x)

    def empty(self):
        return _Mesh2pcfCpp.DoubleGrid_empty(self)

    def size(self):
        return _Mesh2pcfCpp.DoubleGrid_size(self)

    def swap(self, v):
        return _Mesh2pcfCpp.DoubleGrid_swap(self, v)

    def begin(self):
        return _Mesh2pcfCpp.DoubleGrid_begin(self)

    def end(self):
        return _Mesh2pcfCpp.DoubleGrid_end(self)

    def rbegin(self):
        return _Mesh2pcfCpp.DoubleGrid_rbegin(self)

    def rend(self):
        return _Mesh2pcfCpp.DoubleGrid_rend(self)

    def clear(self):
        return _Mesh2pcfCpp.DoubleGrid_clear(self)

    def get_allocator(self):
        return _Mesh2pcfCpp.DoubleGrid_get_allocator(self)

    def pop_back(self):
        return _Mesh2pcfCpp.DoubleGrid_pop_back(self)

    def erase(self, *args):
        return _Mesh2pcfCpp.DoubleGrid_erase(self, *args)

    def __init__(self, *args):
        _Mesh2pcfCpp.DoubleGrid_swiginit(self, _Mesh2pcfCpp.new_DoubleGrid(*args))

    def push_back(self, x):
        return _Mesh2pcfCpp.DoubleGrid_push_back(self, x)

    def front(self):
        return _Mesh2pcfCpp.DoubleGrid_front(self)

    def back(self):
        return _Mesh2pcfCpp.DoubleGrid_back(self)

    def assign(self, n, x):
        return _Mesh2pcfCpp.DoubleGrid_assign(self, n, x)

    def resize(self, *args):
        return _Mesh2pcfCpp.DoubleGrid_resize(self, *args)

    def insert(self, *args):
        return _Mesh2pcfCpp.DoubleGrid_insert(self, *args)

    def reserve(self, n):
        return _Mesh2pcfCpp.DoubleGrid_reserve(self, n)

    def capacity(self):
        return _Mesh2pcfCpp.DoubleGrid_capacity(self)
    __swig_destroy__ = _Mesh2pcfCpp.delete_DoubleGrid

# Register DoubleGrid in _Mesh2pcfCpp:
_Mesh2pcfCpp.DoubleGrid_swigregister(DoubleGrid)

